from Crypto.Cipher import AES
import base64
import json

def decrypt_data(encrypted_data, secret_key):
    # Initialize the cipher with AES128 in GCM mode
    cipher = AES.new(secret_key, AES.MODE_GCM, nonce=b'\x00' * 16)

    # Decode the ciphertext from base64
    encrypted_data = base64.b64decode(encrypted_data)

    # Decrypt the data
    decrypted_data = cipher.decrypt_and_verify(encrypted_data[:-16], encrypted_data[-16:])
    return decrypted_data.decode('utf-8')

# Secret key (16 bytes for AES128)
secret_key = b"1231231231231234"

# Read encrypted responses from file
try:
    with open('encrypted_responses.json', 'r') as file:
        encrypted_responses = json.load(file)
except FileNotFoundError:
    print("Error: File 'encrypted_responses.json' not found.")
    exit()
except json.JSONDecodeError:
    print("Error: Invalid JSON format in 'encrypted_responses.json'.")
    exit()

# Iterate over each dictionary in the list
for encrypted_response in encrypted_responses:
    # Ensure that the response is a dictionary
    if isinstance(encrypted_response, dict):
        # Extract ciphertext from JSON object
        if "response" in encrypted_response:
            encrypted_data = encrypted_response["response"]
            # Decrypt the data
            decrypted_data = decrypt_data(encrypted_data, secret_key)
            print("Decrypted data:", decrypted_data)
        else:
            print("Error: 'response' key not found in dictionary.")
    else:
        print("Error: Encrypted response is not a dictionary.")
